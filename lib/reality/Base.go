package reality

import (
	"bufio"
	"fmt"
	"strconv"
)

//BaseBUNKER : Where users "are"
const BaseBUNKER = 0

//BaseSAM : Ground based Anti-Air station
const BaseSAM = 1

//BaseRADAR : Ground based Radar for unit detection
const BaseRADAR = 2

//BaseAIRSTRIP : Used to house and launch aircraft
const BaseAIRSTRIP = 3

//BaseFUELDEPOT : Used to store Fuel to transport to other bases
const BaseFUELDEPOT = 4

//BaseAMMODEPOT : Used to store ammunitions to transport to other bases
const BaseAMMODEPOT = 5

//BaseTRANSDEPOT : Used to store land vehicles for transporting resources and offense
const BaseTRANSDEPOT = 6

//BasePORT : Used to store sea vehicles for transporting resources and offense
const BasePORT = 7

// Base : Generic base type
type Base struct {
	name      string
	baseType  int
	ipAddress string
	ipPort    int
	loca      Location
}

//BaseCreate : creates a base
func BaseCreate(t Team, baseType int, ipAddress string, ipPort int, randomNameScanner *bufio.Scanner) Base {
	// name comes from random word list

	// ipAddr comes from list generated by initial cidr notation
	// ipPort is generated by initial random list separated by type
	var base Base
	if IPv4Check(ipAddress) {
		str := GetBaseName(randomNameScanner)
		base := Base{name: str, baseType: baseType, ipAddress: ipAddress, ipPort: ipPort}
		return base
	}
	return base
}

// SetName : Sets the name of the base, returns true if changed
func (b *Base) SetName(n string) bool {
	if n != "" {
		b.name = n
		return true
	}
	return false
}

// Name : returns the name of the base
func (b Base) Name() string {
	return b.name
}

// Type : returns the type of the base
func (b Base) Type() string {
	switch b.baseType {
	case 0:
		return "Bunker"
	case 1:
		return "SAM"
	case 2:
		return "RADAR"
	case 3:
		return "Air Strip"
	case 4:
		return "Fuel Depot"
	case 5:
		return "Ammo Depot"
	case 6:
		return "Transport Depot"
	case 7:
		return "Port"
	default:
	}
	return "unknown"
}

//IPAddress : returns the IP address of the base
func (b Base) IPAddress() string {
	return b.ipAddress
}

//IPPort : returns the IP port of the base main service
func (b Base) IPPort() int {
	return b.ipPort
}

//String : formats the values of a base in the form of a string
func (b Base) String() string {
	var str = b.name + ": " + "\n\tIP Address: \t" + b.ipAddress + "\n\tIP Port: \t" + strconv.Itoa(b.ipPort) + "\n\tType: \t" + b.Type() + "\n\tLocation: \t" + b.Location()
	return str
}

//Location : returns location of base
func (b Base) Location() string {
	str := "x: " + fmt.Sprint(b.loca.x) + "\ty: " + fmt.Sprint(b.loca.y)
	return str
}

//ChangeLocation : changes the location of a base
func (b *Base) ChangeLocation(x float32, y float32) bool {
	loca := LocationCreate(x, y)
	//if out of bounds return false
	b.loca = loca
	return true
}
